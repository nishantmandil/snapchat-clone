{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","width","height","facingMode","WebcamCaptube","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","path","exact","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41619f79.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState: {\r\n    cameraImage: null,\r\n  },\r\n  reducers: {\r\n  \r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n    resetCameraImage: (state) => {\r\n        state.cameraImage = null;\r\n    }\r\n  },\r\n  });\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\n\r\nexport const selectCameraImage = state => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import React, { useCallback, useRef, useState } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { setCameraImage } from './features/cameraSlice';\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./WebcamCapture.css\"\r\n\r\nconst videoConstraints = {\r\n    width: 250,\r\n    height: 400,\r\n    facingMode: \"user\",\r\n}\r\n\r\nfunction WebcamCaptube() {\r\n\r\n    const webcamRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const capture = useCallback(() => {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        dispatch(setCameraImage(imageSrc));\r\n        history.push('/preview')\r\n    }, [webcamRef])\r\n\r\n\r\n    return (\r\n        <div className=\"webcamCapture\">\r\n            <Webcam \r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n\r\n            <RadioButtonUncheckedIcon className=\"webcamCapture__button\"\r\n            onClick={capture} fontSize=\"large\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default WebcamCaptube","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDflvxK_iovCRevYzgydLzZvouP9P7SC3M\",\r\n    authDomain: \"snapchat-n.firebaseapp.com\",\r\n    projectId: \"snapchat-n\",\r\n    storageBucket: \"snapchat-n.appspot.com\",\r\n    messagingSenderId: \"987059705931\",\r\n    appId: \"1:987059705931:web:905611e3aadd8b3cf415ce\",\r\n    measurementId: \"G-5XT9SQCK0D\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const storage = firebase.storage();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { db, auth, storage, provider };","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    user: null,\r\n    selectedImage: null\r\n  },\r\n  reducers: {\r\n  \r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n    selectImage: (state, action) => {\r\n      state.selectedImage = action.payload;\r\n    },\r\n    resetImage: (state) => {\r\n      state.selectedImage = null;\r\n    },\r\n  },\r\n  });\r\n\r\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\r\n\r\n\r\nexport const selectUser = state => state.app.user;\r\n\r\nexport const selectSelectedImage = state => state.app.selectedImage;\r\n\r\nexport default appSlice.reducer;\r\n","import React, { useEffect } from 'react'\r\nimport \"./Preview.css\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { resetCameraImage, selectCameraImage } from \"./features/cameraSlice\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\"\r\nimport CreateIcon from \"@material-ui/icons/Create\"\r\nimport NoteIcon from \"@material-ui/icons/Note\"\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\"\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\"\r\nimport CropIcon from \"@material-ui/icons/Crop\"\r\nimport TimerIcon from \"@material-ui/icons/Timer\"\r\nimport SendIcon from \"@material-ui/icons/Send\"\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { db, storage } from \"./firebase\"\r\nimport firebase from \"firebase\"\r\nimport { selectUser } from './features/appSlice'\r\n\r\nfunction Preview() {\r\n\r\n    const cameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n        if (!cameraImage) {\r\n            history.replace('/')\r\n        }\r\n    }, [cameraImage, history]);\r\n\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage());\r\n    }\r\n\r\n    const sendPost = () => {\r\n        const id = uuid();\r\n        const uploadTask = storage.ref(`posts/${id}`).putString(cameraImage, \"data_url\");\r\n\r\n        uploadTask.on('state_changed', null, (error) => {\r\n            console.log(error)\r\n        },\r\n        () => {\r\n            //COMPLETE function\r\n            storage.ref('posts').child(id).getDownloadURL().then(url => {\r\n                db.collection('posts').add({\r\n                    imageUrl: url,\r\n                    username: 'nishant',\r\n                    read: false,\r\n                    profilePic: user.profilePic,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                })\r\n                history.replace('/chats')\r\n            })\r\n        }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <CloseIcon onClick={closePreview} className=\"preview__close\" />\r\n            <div className=\"preview__toolbarRight\">\r\n                <TextFieldsIcon />\r\n                <CreateIcon />\r\n                <NoteIcon />\r\n                <MusicNoteIcon />\r\n                <AttachFileIcon />\r\n                <CropIcon />\r\n                <TimerIcon />\r\n            </div>\r\n            <img src={cameraImage} alt=\"\" />\r\n            <div onClick={sendPost} className=\"preview__footer\">\r\n                <h2>Send Now</h2>\r\n                <SendIcon fontSize=\"small\" className=\"preview__sendIcon\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./Chat.css\"\r\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\"\r\nimport ReactTimeago from \"react-timeago\"\r\nimport { selectImage } from './features/appSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { db } from './firebase'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Chat({ id,profilePic,username,timestamp,imageUrl,read }) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const open = () => {\r\n        if (!read) {\r\n            dispatch(selectImage(imageUrl))\r\n            db.collection('posts').doc(id).set({\r\n                read: true,\r\n            },\r\n            { merge: true }\r\n            );\r\n            history.push('/chats/view')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat__avatar\" src={profilePic} />\r\n            <div className=\"chat__info\">\r\n                <h4>{username}</h4>\r\n                <p>\r\n                    {!read && \"Tap to view-\"}{\" \"} \r\n                    <ReactTimeago date= {new Date(timestamp?.toDate()).toUTCString()} />\r\n                </p>\r\n            </div>\r\n\r\n            {!read && <StopRoundedIcon className=\"chat__readIcon\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport \"./Chats.css\"\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble'\r\nimport { auth, db } from './firebase'\r\nimport Chat from './Chat'\r\nimport { selectUser } from './features/appSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\"\r\nimport { useHistory } from 'react-router-dom'\r\nimport { resetCameraImage } from './features/cameraSlice'\r\n\r\n\r\nfunction Chats() {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n            setPosts(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n            })))\r\n        })\r\n    }, [])\r\n\r\n    const takeSnap = () => {\r\n        dispatch(resetCameraImage());\r\n        history.push('/')\r\n    };\r\n\r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats__header\">\r\n                <Avatar src={user.profilePic} onClick={() => auth.signOut()} className=\"chats__avatar\" />\r\n                <div className=\"chats__search\">\r\n                    <SearchIcon className=\"chats__searchIcon\"/>\r\n                    <input placeholder=\"Friends\" type=\"text\" />\r\n                </div>\r\n                <ChatBubbleIcon className=\"chats__chatIcon\" />\r\n            </div>\r\n            <div className=\"chats__posts\">\r\n                {posts.map(\r\n                    ({\r\n                        id, \r\n                        data: {profilePic,username,timestamp,imageUrl,read},\r\n                }) => (\r\n                    <Chat\r\n                    key={id}\r\n                    id={id}\r\n                    username={username}\r\n                    timestamp={timestamp}\r\n                    imageUrl={imageUrl}\r\n                    read={read}\r\n                    profilePic={profilePic}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <RadioButtonUncheckedIcon \r\n            className=\"chats__takePicIcon\"\r\n            onClick={takeSnap}\r\n            fontSize='large'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./ChatView.css\"\r\nimport { selectSelectedImage } from './features/appSlice'\r\nimport {CountdownCircleTimer } from 'react-countdown-circle-timer'\r\n\r\nfunction ChatView() {\r\n\r\n    const selectedImage = useSelector(selectSelectedImage);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!selectedImage) {\r\n            exit();\r\n        }\r\n    }, [selectedImage])\r\n\r\n    const exit = () => {\r\n        history.replace('/chats')\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatView\">\r\n            <img onClick={exit} src={selectedImage} />\r\n            <div className=\"chatView__timer\">\r\n            <CountdownCircleTimer \r\n            isPlaying\r\n            duration={10}\r\n            strokeWidth={6}\r\n            size={50}\r\n            colors={[\r\n                [\"#004777\", 0.33],\r\n                ['#f7B801', 0.33],\r\n                ['#A30000', 0.33],\r\n            ]}>\r\n                {({ remainingTime }) => {\r\n                    if (remainingTime == 0) {\r\n                        exit();\r\n                    }\r\n\r\n                    return remainingTime;\r\n                }}\r\n            </CountdownCircleTimer>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatView\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./Login.css\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { auth, provider } from './firebase';\r\nimport { login } from './features/appSlice';\r\n\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then(result => {\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic: result.user.photoURL,\r\n                id: result.user.uid,\r\n            }))\r\n        }).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\" alt=\"\" />\r\n                <Button variant='outlined' onClick={signIn}>Sign In</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport WebcamCaptube from './WebcamCapture';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Preview from './Preview';\r\nimport Chats from './Chats';\r\nimport ChatView from './ChatView';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login, logout, selectUser } from './features/appSlice';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\n\r\n\r\nfunction App() {\r\n\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(login({\r\n          username: authUser.displayName,\r\n          profilePic: authUser.photoURL,\r\n          id: authUser.uid,\r\n        }))\r\n      } else {\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <Login />\r\n        ): (\r\n          <>\r\n          <img className=\"app__logo\" src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\" alt=\"\" \r\n          />\r\n\r\n          <div className=\"app__body\">\r\n       <div className=\"app__bodyBackground\" >\r\n       <Switch>\r\n          <Route path=\"/chats/view\">\r\n            <ChatView />\r\n          </Route>\r\n\r\n          <Route path=\"/chats\">\r\n            <Chats />\r\n          </Route>\r\n\r\n          <Route path=\"/preview\">\r\n            <Preview />\r\n          </Route>\r\n\r\n          <Route exact path=\"/\">\r\n            <WebcamCaptube />\r\n          </Route>\r\n        </Switch>\r\n        </div>\r\n      </div>\r\n      </>\r\n        )}\r\n      \r\n    </Router>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from '../features/appSlice';\r\nimport cameraReducer from \"../features/cameraSlice\"\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    camera: cameraReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}